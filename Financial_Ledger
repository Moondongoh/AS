#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<windows.h>
#include<limits.h>

FILE* fp;
long long max = 0;        // 입금
long long min = 0;        // 출금
long long balance = 0;    // 잔액
int i = 0;
long long Limit_min = INT_MIN;
long long Limit_max = INT_MAX;

void plus();
void minus();
void print();
void cur(short x, short y)
{
    COORD pos = { x, y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

void plus()
{
        i = 0;
        char income[15];
        time_t timer;
        struct tm* t;
        timer = time(NULL);
        t = localtime(&timer);
        printf("입금 내역을 적어주세요: ");
        scanf_s("%s", &income, 15);
        while (1)
        {
            printf("입금 금액: ");
            if (scanf("%lld", &max) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else if (max < Limit_min)
            {
                printf("언더 플로우가 발생하였습니다. 다시 입력해주세요.\n");
                while (getchar() != '\n');
                continue;
            }
            else if (max > Limit_max)
            {
                printf("오버 플로우가 발생하였습니다. 다시 입력해주세요.\n");
                while (getchar() != '\n');
                continue;
            }
            balance += max;
            printf("거래 중입니다.");
            for (i; i < 3;i++)
            {
                printf("->");
                Sleep(800);
            }
            printf("거래 완료!");
            fprintf(fp, "\n입금 내역: %s\n입금 금액: %d 원", income, max);
            printf("\n잔액: %d\n", balance);
            printf("처리되었습니다.\n");
            N_time();
            break;
        }
}

void minus()
{
        i = 0;
        char expense[15];
        time_t timer;
        struct tm* t;
        timer = time(NULL);
        t = localtime(&timer);
        printf("지출 내역을 적어주세요: ");
        scanf_s("%s", &expense, 15);
        while (1)
        {
            printf("지출 금액: ");
            if (scanf("%lld", &min) != 1)
            {
                printf("잘못된 값을 입력 했습니다\n");
                while (getchar() != '\n');
                continue;
            }
            else if (min < Limit_min)
            {
                printf("언더 플로우가 발생하였습니다. 다시 입력해주세요.\n");
                while (getchar() != '\n');
                continue;
            }
            else if (min > Limit_max)
            {
                printf("오버 플로우가 발생하였습니다. 다시 입력해주세요.\n");
                while (getchar() != '\n');
                continue;
            }
            balance -= min;
            printf("거래 중입니다.");
            for (i; i < 3;i++)
            {
                printf("->");
                Sleep(800);
            }
            printf("거래 완료!");
            fprintf(fp, "\n지출 내역: %s\n지출 금액: %d 원", expense, min);
            printf("\n잔액: %d\n", balance);
            printf("처리되었습니다.\n");
            N_time();
            break;
        }

}

void print()
{
        i = 0;
        time_t timer;
        struct tm* t;
        timer = time(NULL);
        t = localtime(&timer);
        printf("출력 중입니다.");
        for (i; i < 3;i++)
        {
            printf("->");
            Sleep(800);
        }
        printf("출력 완료!");
        printf("\n잔액 조회: %d\n", balance);
        fprintf(fp, "\n잔액 조회: %d 원", balance);
        printf("처리되었습니다.\n");
        N_time();
}

int main()
{
    printf("MIN : %d\n", Limit_min);
    printf("MAX : %d\n", Limit_max);

    char assets[15];
    COORD pos = { 0,0 };	//커서 위치
    fp = fopen("list.txt", "w");
    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return 1;
    }

    printf("====== 가계부 =======\n");
    printf("입력하신 내역을 적어주세요: ");
    scanf_s("%s", &assets, 15);
    while (1)
    {
        printf("현재 자산을 입력해주세요: ");
        if (scanf("%lld", &balance) != 1)
        {
            printf("잘못된 값을 입력 했습니다\n");
            while (getchar() != '\n');
            continue;
        }
        else if (balance < Limit_min)
        {
            printf("언더 플로우가 발생하였습니다. 다시 입력해주세요.\n");
            while (getchar() != '\n');
            continue;
        }
        else if (balance > Limit_max)
        {
            printf("오버 플로우가 발생하였습니다. 다시 입력해주세요.\n");
            while (getchar() != '\n');
            continue;
        }
        break;
    }
    fprintf(fp, "내역: %s\n현재 자산: %d 원\n", assets, balance);

    while (1)
    {
        int choice;
        while (1)
        {
            printf("\n기능 선택 (1. 입금 2. 지출 3. 잔액 조회 4. 종료): ");
            if (scanf("%d", &choice) != 1)
            {
                system("cls");
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
                printf("잘못된 값을 입력 했습니다.\n");
                printf("이용하실 서비스를 선택해주세요.\n");
                while (getchar() != '\n');
                continue;
            }
            break;
        }

        switch (choice)
        {
        case 1:
            system("cls");
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
            plus();
            break;
        case 2:
            system("cls");
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
            minus();
            break;
        case 3:
            system("cls");
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
            print();
            break;
        case 4:
            system("cls");
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
            printf("프로그램을 종료합니다.\n");
            printf("이용해 주셔서 감사합니다.\n");
            fclose(fp);
            return 0;
        default:
            system("cls");
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
            printf("올바른 기능을 선택해주세요.\n");
            break;
        }
    }

    fclose(fp);
    return 0;
}