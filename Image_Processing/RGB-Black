#include <iostream>
#include <fstream>
#include <vector>
#include <windows.h>
#include <cmath>
#include <algorithm>

template <typename T>
const T& clamp(const T& v, const T& lo, const T& hi) {
    return (v < lo) ? lo : (hi < v) ? hi : v;
}

class ModifyImg {
public:
    BITMAPFILEHEADER fileHeader;
    BITMAPINFOHEADER infoHeader;
    std::ifstream bmpFile;

    ModifyImg(const std::string& filename) {
        bmpFile.open(filename, std::ios::binary);
        if (!bmpFile) {
            throw std::runtime_error("파일을 열 수 없습니다.");
        }
        bmpFile.read(reinterpret_cast<char*>(&fileHeader), sizeof(fileHeader));
        bmpFile.read(reinterpret_cast<char*>(&infoHeader), sizeof(infoHeader));
    }

    ~ModifyImg() {
        if (bmpFile.is_open()) {
            bmpFile.close();
        }
    }

    void invertColors(const std::string& outputFilename) {
        int width = infoHeader.biWidth;
        int height = std::abs(infoHeader.biHeight);
        int bytesPerPixel = infoHeader.biBitCount / 8;
        int rowStride = ((width * bytesPerPixel + 3) / 4) * 4;

        std::vector<BYTE> rowData(rowStride);
        std::ofstream outFile(outputFilename, std::ios::binary);

        outFile.write(reinterpret_cast<const char*>(&fileHeader), sizeof(BITMAPFILEHEADER));
        outFile.write(reinterpret_cast<const char*>(&infoHeader), sizeof(BITMAPINFOHEADER));

        bmpFile.seekg(fileHeader.bfOffBits, std::ios::beg);

        bool isTopDown = infoHeader.biHeight < 0;
        for (int y = 0; y < height; ++y) {
            int readRow = isTopDown ? y : (height - 1 - y);
            bmpFile.seekg(fileHeader.bfOffBits + readRow * rowStride, std::ios::beg);
            bmpFile.read(reinterpret_cast<char*>(rowData.data()), rowStride);

            for (int x = 0; x < width; ++x) {
                BYTE r = rowData[x * bytesPerPixel + 2];
                BYTE g = rowData[x * bytesPerPixel + 1];
                BYTE b = rowData[x * bytesPerPixel + 0];

                BYTE gray = static_cast<BYTE>(0.3 * r + 0.59 * g + 0.11 * b);

                rowData[x * bytesPerPixel + 0] = gray;
                rowData[x * bytesPerPixel + 1] = gray;
                rowData[x * bytesPerPixel + 2] = gray;
            }

            int writeRow = isTopDown ? y : (height - 1 - y);
            outFile.seekp(fileHeader.bfOffBits + writeRow * rowStride, std::ios::beg);
            outFile.write(reinterpret_cast<const char*>(rowData.data()), rowStride);
        }

        outFile.close();
    }

    void applyFilter(const std::string& outputFilename, const std::vector<int>& filterX, const std::vector<int>& filterY) {
        int width = infoHeader.biWidth;
        int height = std::abs(infoHeader.biHeight);
        int bytesPerPixel = infoHeader.biBitCount / 8;
        int rowStride = ((width * bytesPerPixel + 3) / 4) * 4;

        std::vector<BYTE> rowData(rowStride * height);
        std::vector<BYTE> tempRowData(rowStride * height);
        std::ofstream outFile(outputFilename, std::ios::binary);

        outFile.write(reinterpret_cast<const char*>(&fileHeader), sizeof(BITMAPFILEHEADER));
        outFile.write(reinterpret_cast<const char*>(&infoHeader), sizeof(BITMAPINFOHEADER));

        bmpFile.seekg(fileHeader.bfOffBits, std::ios::beg);
        bmpFile.read(reinterpret_cast<char*>(rowData.data()), rowData.size());

        bool isTopDown = infoHeader.biHeight < 0;
        std::copy(rowData.begin(), rowData.end(), tempRowData.begin());

        for (int y = 1; y < height - 1; ++y) {
            for (int x = 1; x < width - 1; ++x) {
                int sumR = 0, sumG = 0, sumB = 0;
                int sumRx = 0, sumGx = 0, sumBx = 0;
                int sumRy = 0, sumGy = 0, sumBy = 0;

                for (int dy = -1; dy <= 1; ++dy) {
                    for (int dx = -1; dx <= 1; ++dx) {
                        int nx = x + dx;
                        int ny = y + dy;
                        int offset = (ny * rowStride) + (nx * bytesPerPixel);
                        int filterValueX = filterX[(dy + 1) * 3 + (dx + 1)];
                        int filterValueY = filterY[(dy + 1) * 3 + (dx + 1)];

                        sumBx += tempRowData[offset + 0] * filterValueX;
                        sumGx += tempRowData[offset + 1] * filterValueX;
                        sumRx += tempRowData[offset + 2] * filterValueX;

                        sumBy += tempRowData[offset + 0] * filterValueY;
                        sumGy += tempRowData[offset + 1] * filterValueY;
                        sumRy += tempRowData[offset + 2] * filterValueY;
                    }
                }

                sumB = std::sqrt(sumBx * sumBx + sumBy * sumBy);
                sumG = std::sqrt(sumGx * sumGx + sumGy * sumGy);
                sumR = std::sqrt(sumRx * sumRx + sumRy * sumRy);

                int centerOffset = (y * rowStride) + (x * bytesPerPixel);
                rowData[centerOffset + 0] = clamp(sumB, 0, 255);
                rowData[centerOffset + 1] = clamp(sumG, 0, 255);
                rowData[centerOffset + 2] = clamp(sumR, 0, 255);
            }
        }

        outFile.seekp(fileHeader.bfOffBits, std::ios::beg);
        outFile.write(reinterpret_cast<const char*>(rowData.data()), rowData.size());

        outFile.close();
    }
};

int main() {
    bool Loop = true;

    while (Loop)
    {
        try {
            ModifyImg img("input.bmp");

            int option;
            std::cout << "1. 회색조 변환\n2. 평활화\n3. Sobel 가로 필터\n4. Sobel 세로 필터\n5. 종료\n선택: ";
            std::cin >> option;

            switch (option) {
            case 1:
                img.invertColors("output_gray.bmp");
                std::cout << "회색조 변환 완료: output_gray.bmp\n";
                break;

            case 2:
                img.applyFilter("output_smoothed.bmp", { 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1 });
                std::cout << "평활화 완료: output_smoothed.bmp\n";
                break;

            case 3:
                img.applyFilter("output_sobel_horizontal.bmp", { -1, -1, -1, 0, 0, 0, 1, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 });
                std::cout << "Sobel 가로 필터 완료: output_sobel_horizontal.bmp\n";
                break;

            case 4:
                img.applyFilter("output_sobel_vertical.bmp", { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -1, 0, 1, -1, 0, 1, -1, 0, 1 });
                std::cout << "Sobel 세로 필터 완료: output_sobel_vertical.bmp\n";
                break;

            case 5:
                std::cout << "프로그램을 종료합니다.\n";
                Loop = false;

            default:
                std::cerr << "잘못된 선택입니다.\n";
                break;
            }
        }
        catch (const std::exception& e) {
            std::cerr << "오류 발생: " << e.what() << std::endl;
            return 1;
        }
    }

    return 0;
}
